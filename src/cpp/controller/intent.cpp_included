/*
    Unfortunately due to the limitations in the toolchain right now,
    only one source file can include a header that defines an abstract
    class. So including this file from controller.cpp is the workaround.
*/

#include <math.h>

constexpr float kCycleRatio = 10000;

void LineMoveIntent::Start() {
    duration_ = kCycleRatio / speed_ * controller_->get_bot().get_pos().DistanceTo(to_);

    controller_->get_bot().LookAt(to_);
    controller_->get_bot().set_velocity(speed_);

    start_ = *TIMER;
    running_ = true;
}

void LineMoveIntent::Stop() {
    controller_->get_bot().set_velocity(0);
    running_ = false;
}

static int GetAngle(int from_x, int from_y, int to_x, int to_y) {
    float angle = atanf((float) (to_y - from_y) / (to_x - from_x));
    if (to_x < from_x) {
        angle += M_PI;
    }
    return roundf(angle * 180 / M_PI);
}

constexpr int kShootAngle = 20;

void ScanIntent::Start() {
    const int curr_angle = controller_->get_bot().get_angle();
    const OpponentHintInfo hint = controller_->get_bot().get_opponent_hint();

    if(hint.host_x == -1) {
        return;
    }

    int start_angle, end_angle;

    int hold_y_calc_x, hold_x_calc_y;
    int wall_x, wall_y;
    float tan_angle = tanf(hint.angle * M_PI / 180);

    if ((hint.angle >= 0 && hint.angle < 90) || (hint.angle >= -360 && hint.angle < -270)) {
        // Right or bottom wall
        hold_y_calc_x = roundf((40 - hint.host_y) / tan_angle);
        hold_x_calc_y = roundf((40 - hint.host_x) * tan_angle);
        if (hint.host_x + hold_y_calc_x > 40) {
            // Right wall
            wall_x = 40;
            wall_y = hint.host_y + hold_x_calc_y;
        } else {
            // Bottom wall
            wall_x = hint.host_x + hold_y_calc_x;
            wall_y = 40;
        }
    } else if ((hint.angle >= 90 && hint.angle < 180) || (hint.angle >= -270 && hint.angle < -180)) {
        // Bottom or left wall
        hold_y_calc_x = roundf((40 - hint.host_y) / tan_angle);
        hold_x_calc_y = roundf(-1 * hint.host_x * tan_angle);
        if (hint.host_x + hold_y_calc_x < 0) {
            // Left wall
            wall_x = 0;
            wall_y = hint.host_y + hold_x_calc_y;
        } else {
            // Bottom wall
            wall_x = hint.host_x + hold_y_calc_x;
            wall_y = 40;
        }
    } else if ((hint.angle >= 180 && hint.angle < 270) || (hint.angle >= -180 && hint.angle < -90)) {
        // Left or top wall
        hold_y_calc_x = roundf(-1 * hint.host_y / tan_angle);
        hold_x_calc_y = roundf(-1 * hint.host_x * tan_angle);
        if (hint.host_x + hold_y_calc_x < 0) {
            // Left wall
            wall_x = 0;
            wall_y = hint.host_y + hold_x_calc_y;
        } else {
            // Top wall
            wall_x = hint.host_x + hold_y_calc_x;
            wall_y = 0;
        }
    } else {
        // Top or right wall
        hold_y_calc_x = roundf(-1 * hint.host_y / tan_angle);
        hold_x_calc_y = roundf((40 - hint.host_x) * tan_angle);
        if (hint.host_x + hold_y_calc_x > 40) {
            // Right wall
            wall_x = 40;
            wall_y = hint.host_y + hold_x_calc_y;
        } else {
            // Top wall
            wall_x = hint.host_x + hold_y_calc_x;
            wall_y = 0;
        }
    }

    Point player_pos = controller_->get_bot().get_pos();
    int angle_host = GetAngle(player_pos.x, player_pos.y, hint.host_x * 8, hint.host_y * 8);
    int angle_wall = GetAngle(player_pos.x, player_pos.y, wall_x * 8, wall_y * 8);

    angle_wall = (angle_wall + 360) % 360;
    angle_host = (angle_host + 360) % 360;

    int larger, smaller;

    if (angle_wall > angle_host) {
        larger = angle_wall;
        smaller = angle_host;
    } else {
        larger = angle_host;
        smaller = angle_wall;
    }

    if (larger - smaller > 180) {
        start_angle = larger - 360;
        end_angle = smaller;
    } else {
        start_angle = smaller;
        end_angle = larger;
    }

    Tile scan_result;

    int shootDelta = controller_->get_bot().get_bytecoins() < 5000 ? 5 : 4;

    for (int angle = start_angle; angle < end_angle; angle += delta_) {
        controller_->get_bot().set_angle(angle, Orientation::ABSOLUTE);
        scan_result = controller_->get_bot().Scan().tile;
        if (scan_result.IsEnemy()) {
            controller_->get_bot().set_angle(-1 * kShootAngle, Orientation::RELATIVE);
            controller_->get_bot().Shoot();
            for (int i = 1; i < 2 * kShootAngle; i += shootDelta) {
                sleep(10);
                controller_->get_bot().set_angle(shootDelta, Orientation::RELATIVE);
                controller_->get_bot().Shoot();
                if(controller_->get_bot().get_bytecoins() == 0) {
                    printf("fuck\n");
                }
            }
            break;
        }
    }

    controller_->get_bot().set_angle(curr_angle, Orientation::ABSOLUTE);
}