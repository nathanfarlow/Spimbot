/*
    Unfortunately due to the limitations in the toolchain right now,
    only one source file can include a header that defines an abstract
    class. So including this file from controller.cpp is the workaround.
*/

#include <math.h>

constexpr float kCycleRatio = 10000;

constexpr int kShootAngleStart = 20;
constexpr int kShootAngleChange = 4;

void LineMoveIntent::Start() {
    duration_ = kCycleRatio / speed_ * controller_->get_bot().get_pos().DistanceTo(to_);

    controller_->get_bot().ClearBonked();
    controller_->get_bot().ClearRespawn();

    controller_->get_bot().LookAt(to_);
    controller_->get_bot().set_velocity(speed_);

    start_ = *TIMER;
    running_ = true;
}

void LineMoveIntent::Stop() {
    controller_->get_bot().set_velocity(0);
    running_ = false;
}

bool LineMoveIntent::WasInterrupted() const {
    return controller_->get_bot().IsBonked()
        || controller_->get_bot().IsRespawn()
        || Intent::WasInterrupted();
}

void SpinShootIntent::Start() {
    running_ = true;

    int curr_angle = controller_->get_bot().get_angle();

    /*OpponentHintInfo hint = controller->get_bot().get_opponent_hint();
    int start_angle;
    int end_angle;
    if (hint.host_x == -1) {
        start_angle = 0;
        end_angle = 360;
    } else {

    }*/

    int turn_angle = 360 / divisions_;
    Tile scan_result; 

    for (int i = 0; i < divisions_; i++) {
        controller_->get_bot().set_angle(turn_angle, Orientation::RELATIVE);
        scan_result = controller_->get_bot().Scan().tile;
        if (scan_result.IsEnemy()) {
            controller_->get_bot().set_angle(-1 * kShootAngleStart, Orientation::RELATIVE);
            controller_->get_bot().Shoot();
            for (int i = 1; i < 2 * kShootAngleStart; i += kShootAngleChange) {
                controller_->get_bot().set_angle(kShootAngleChange, Orientation::RELATIVE);
                controller_->get_bot().Shoot();
            }
            break;
        }
    }

    controller_->get_bot().set_angle(curr_angle, Orientation::ABSOLUTE);
}

void SpinShootIntent::Stop() {
    running_ = false;
}
