Strategy:

Our bot follows a hardcoded path to move around the map and shoot hosts. The hardcoded straight
lines the bot moves in are broken up between scanning and moving. While scanning, we get a hint for
the opponent's location and scan starting from the host towards the point where the line from the
host following the opponent's angle meets the wall. By scanning in large bursts like this our bot
nearly always scans the opponent when there is a direct line of sight from our bot to the opponent's. 
Then the bot shoots several UDP packets at different angles in an attempt to hit the opponent, even
while the opponent is moving. Much of our strategy relies on the super-fast puzzle solving algorithm
we came up with, easily netting us thousands of bytecoins. The puzzle solving algorithm utilized
lookup tables to achieve this. With the huge amount of bytecoins we had, we could afford to
continously scan and shoot UDP packets at the enemy bot in large bursts.

Problems we encountered:

We encountered several bugs while writing the strategy, including arithmatic overflows, invalid
stack reads, and troubles hardcoding the path (including unforseen bonks when the hardcoded path
should have had none). We utilized syscalls to print variable values to help in debugging. The
source of many of our hardcoding woes were slightly off values that needed to be changed. The
biggest bug we had was caused by not correctly handling an interrupt that occurred while we were
handling another interrupt. After we corrected that behavior, many of our previous bugs were
reduced.

Contributions:

Nathan - Implemented the hardcoded path, fixed tons of bugs, implemented an A* pathfinding
algorithm, implemented lookup table puzzle solving, created the interface through which we wrote the
code to interact with Spimbot.

Birkhoff - Researched better puzzle solving techniques and implemented them, such as a Breadth-First
solution, tested the strategy for bugs and bonks.

Jeffrey - Came up with the final hardcoded path, wrote the code for scanning for the enemy and
shooting it and analyzing the opponent hint, and wrote code to test the speed and collect data on
the various puzzle solving functions we had.
